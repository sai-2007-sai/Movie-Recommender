import pandas as pd
import numpy as np
import ast
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load CSVs
movies = pd.read_csv(r"C:\Users\shett\OneDrive\Desktop\MovieRecommender\tmdb_5000_movies.csv")
credits = pd.read_csv(r"C:\Users\shett\OneDrive\Desktop\MovieRecommender\tmdb_5000_credits.csv")

# Merge both on 'title'
movies = movies.merge(credits, on='title')

# Select important columns
movies = movies[['movie_id', 'title', 'overview', 'genres', 'keywords', 'cast', 'crew']]

# Parse JSON-like columns
def convert(obj):
    L = []
    for i in ast.literal_eval(obj):
        L.append(i['name'])
    return L

movies['genres'] = movies['genres'].apply(convert)
movies['keywords'] = movies['keywords'].apply(convert)

# Only top 3 cast members
def convert_cast(obj):
    L = []
    count = 0
    for i in ast.literal_eval(obj):
        if count < 3:
            L.append(i['name'])
            count += 1
        else:
            break
    return L

movies['cast'] = movies['cast'].apply(convert_cast)

# Get director
def get_director(obj):
    for i in ast.literal_eval(obj):
        if i['job'] == 'Director':
            return [i['name']]
    return []

movies['crew'] = movies['crew'].apply(get_director)

# Clean spaces and lowercase
def collapse(L):
    return [i.replace(" ", "").lower() for i in L]

movies['genres'] = movies['genres'].apply(collapse)
movies['keywords'] = movies['keywords'].apply(collapse)
movies['cast'] = movies['cast'].apply(collapse)
movies['crew'] = movies['crew'].apply(collapse)

# Clean overview and combine features
movies['overview'] = movies['overview'].fillna('')
movies['overview'] = movies['overview'].apply(lambda x: x.split())

movies['tags'] = movies['overview'] + movies['genres'] + movies['keywords'] + movies['cast'] + movies['crew']

# Create new DataFrame with just needed data
new_df = movies[['movie_id', 'title', 'tags']].copy()

# Fix: Avoid SettingWithCopyWarning by using .loc
new_df.loc[:, 'tags'] = new_df['tags'].apply(lambda x: " ".join(x))

# Vectorize text using CountVectorizer
cv = CountVectorizer(max_features=5000, stop_words='english')
vectors = cv.fit_transform(new_df['tags']).toarray()

# Compute cosine similarity matrix
similarity = cosine_similarity(vectors)

# Recommendation function
def recommend(movie):
    movie = movie.lower()
    if movie not in new_df['title'].str.lower().values:
        print("❌ Movie not found in dataset.")
        return
    
    idx = new_df[new_df['title'].str.lower() == movie].index[0]
    distances = similarity[idx]
    movie_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])[1:6]
    
    print(f"\n🎬 Movies similar to '{new_df.iloc[idx]['title']}':\n")
    for i in movie_list:
        print(new_df.iloc[i[0]].title)

# ✅ Example usage:
recommend("Avatar")
